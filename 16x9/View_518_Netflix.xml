<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
	<include name="View_518_Netflix">
		<control type="image">
			<include>Dimensions_Fullscreen</include>
			<animation type="Visible" reversible="false">
				<effect type="fade" start="00" end="100" time="500" tween="quadratic" easing="out" />
			</animation>
			<animation type="WindowOpen" reversible="true">
				<effect type="fade" start="00" end="100" time="2600" tween="quadratic" easing="out" delay="1000" />
			</animation>
			<animation type="WindowClose" reversible="true">
				<effect type="fade" start="100" end="00" time="200" tween="quadratic" easing="out" />
			</animation>
			<animation type="Hidden" reversible="true">
				<effect type="fade" start="100" end="00" time="200" tween="quadratic" easing="out" />
			</animation>
			<aspectratio align="center">scale</aspectratio>
			<texture colordiffuse="$INFO[Window(home).Property(Pixelated.ImageColor)]" fallback="common/black.png" background="true">$INFO[Window(home).Property(Pixelated.ImageFilter)]</texture>
			<visible>StringCompare(Window(home).Property(Pixelated.ImageUpdating),1)</visible>
			<visible>Control.IsVisible(518)</visible>
			<visible>!Skin.HasSetting(lights.out)</visible>
			<visible>![[Skin.HasSetting(global.showvideo) + Player.HasVideo] | [Skin.HasSetting(global.showvisualisation) + Player.HasAudio]] + !Window.IsVisible(DialogVideoInfo.xml)</visible>
		</control>
		<control type="image">
			<include>Dimensions_Fullscreen</include>
			<animation type="Visible" reversible="false">
				<effect type="fade" start="00" end="35" time="500" tween="quadratic" easing="out" />
			</animation>
			<animation type="WindowOpen" reversible="true">
				<effect type="fade" start="00" end="35" time="2600" tween="quadratic" easing="out" delay="1000" />
			</animation>
			<animation type="WindowClose" reversible="true">
				<effect type="fade" start="35" end="00" time="200" tween="quadratic" easing="out" />
			</animation>
			<animation type="Hidden" reversible="true">
				<effect type="fade" start="35" end="00" time="200" tween="quadratic" easing="out" />
			</animation>
			<aspectratio align="center">scale</aspectratio>
			<texture colordiffuse="$INFO[Window(home).Property(Pixelated.ImageColor)]">special://skin/extras/backgrounds/pixel.jpg</texture>
			<visible>StringCompare(Window(home).Property(Pixelated.ImageUpdating),1)</visible>
			<visible>Control.IsVisible(518)</visible>
			<visible>!Skin.HasSetting(lights.out)</visible>
			<visible>![[Skin.HasSetting(global.showvideo) + Player.HasVideo] | [Skin.HasSetting(global.showvisualisation) + Player.HasAudio]] + !Window.IsVisible(DialogVideoInfo.xml)</visible>
		</control>
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(518)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<control type="group">
				<top>TopPad</top>
				<left>270</left>
				<control type="image">
					<top>-5</top>
					<width>800</width>
					<height>210</height>
					<texture>$VAR[Container518Logo]</texture>
					<aspectratio align="left" aligny="bottom">keep</aspectratio>
					<fadetime>50</fadetime>
				</control>
			</control>
			<control type="group">
				<top>368</top>
				<left>10</left>
				<width>220</width>
				<height>920</height>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<animation type="conditional" condition="true" reversible="false">
						<effect type="rotate" end="1" time="200" center="auto" tween="quadratic" easing="out"/>
					</animation>
					<label>31823</label>
					<visible>!Container.Content(tvshows) + !Container.Content(episodes) + !Container.Content(seasons)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<animation type="conditional" condition="true" reversible="false">
						<effect type="rotate" end="1" time="200" center="auto" tween="quadratic" easing="out"/>
					</animation>
					<label>33054</label>
					<visible>Container.Content(tvshows)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<animation type="conditional" condition="true" reversible="false">
						<effect type="rotate" end="1" time="200" center="auto" tween="quadratic" easing="out"/>
					</animation>
					<label>$INFO[ListItem.Label]</label>
					<visible>Container.Content(seasons)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<animation type="conditional" condition="true" reversible="false">
						<effect type="rotate" end="1" time="200" center="auto" tween="quadratic" easing="out"/>
					</animation>
					<label>31824</label>
					<visible>Container.Content(episodes)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<top>38</top>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<animation type="conditional" condition="true" reversible="false">
						<effect type="rotate" end="1" time="200" center="auto" tween="quadratic" easing="out"/>
					</animation>
					<label fallback="19055">$INFO[ListItem.Season]</label>
					<visible>Container.Content(tvshows)</visible>
				</control>
				<control type="textbox">
					<right>0</right>
					<left>0</left>
					<height>100</height>
					<top>38</top>
					<align>right</align>
					<font>TinyBold</font>
					<textcolor>white</textcolor>
					<label fallback="19055">$VAR[LabelDirector]</label>
					<autoscroll delay="500" time="1000" repeat="500"/>
					<fadetime>500</fadetime>
					<visible>!Container.Content(seasons) + !Container.Content(tvshows) + !Container.Content(episodes)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<height>38</height>
					<top>38</top>
					<aligny>center</aligny>
					<align>right</align>
					<font>TinyBold</font>
					<textcolor>white</textcolor>
					<label fallback="19055">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20360]]</label>
					<visible>Container.Content(seasons)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<height>38</height>
					<top>38</top>
					<aligny>center</aligny>
					<align>right</align>
					<font>TinyBold</font>
					<textcolor>white</textcolor>
					<label fallback="19055">$INFO[ListItem.Premiered]</label>
					<visible>Container.Content(episodes)</visible>
				</control>
				<control type="label">
					<right>0</right>
					<left>0</left>
					<top>143</top>
					<aligny>center</aligny>
					<align>right</align>
					<font>SmallBold</font>
					<textcolor>white2</textcolor>
					<height>38</height>
					<label>31819</label>
				</control>
				<control type="textbox">
					<left>10</left>
				<height>148</height>
					<top>184</top>
					<align>right</align>
					<font>TinyBold</font>
					<textcolor>white</textcolor>
					<label fallback="19055">$INFO[Window(Home).Property(SkinHelper.ListItemCast)]</label>
					<autoscroll delay="8000" time="1200" repeat="1000"/>
					<fadetime>500</fadetime>
				</control>
			</control>
			<control type="grouplist">
				<top>368</top>
				<height>42</height>
				<left>270</left>
				<right>10</right>
				<orientation>horizontal</orientation>
				<itemgap>10</itemgap>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>symbol</font>
					<height>38</height>
					<textcolor>$VAR[ColourHighlight]</textcolor>
					<width>auto</width>
					<label></label>
					<visible>Container.Content(movies) + !IsEmpty(ListItem.PlayCount)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="-  ">$INFO[ListItem.PlayCount,,  ]</label>
					<visible>Container.Content(movies) + !IsEmpty(ListItem.PlayCount)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>symbol</font>
					<textcolor>selective yellow</textcolor>
					<height>38</height>
					<width>auto</width>
					<label></label>
					<visible>!IsEmpty(ListItem.Rating)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="-  ">$INFO[ListItem.Rating,,  ]</label>
					<visible>!IsEmpty(ListItem.Rating)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>symbol</font>
					<textcolor>$VAR[RottenTomatoesIconColour]</textcolor>
					<height>38</height>
					<width>auto</width>
					<label>$VAR[RottenTomatoesIcon]</label>
					<visible>!StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating),n/a)</visible>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="-  ">$INFO[Window(Home).Property(SkinHelper.RottenTomatoesRating),,%  ]</label>
					<visible>!StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating),n/a)</visible>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="button">
					<width>34</width>
					<height>37</height>
					<textcolor>black</textcolor>
					<textoffsetx>0</textoffsetx>
					<label>$INFO[Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating)]</label>
					<font>TinyBold</font>
					<aligny>center</aligny>
					<align>center</align>
					<texturefocus colordiffuse="$VAR[CommunityRatingColour]">common/white.png</texturefocus>
					<texturenofocus colordiffuse="$VAR[CommunityRatingColour]">common/white.png</texturenofocus>
					<visible>!IsEmpty(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating))</visible>
					<visible>!StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating),n/a)</visible>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="-">$VAR[GenreFormatted,,  ]</label>
					<visible>StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating),n/a)</visible>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="-">$VAR[GenreFormatted,  ,  ]</label>
					<visible>!StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesAudienceRating),n/a)</visible>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="  -  ">$INFO[ListItem.Year,,  ]</label>
					<visible>Container.Content(movies)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label fallback="">$INFO[Window(Home).Property(SkinHelper.RottenTomatoesBoxOffice),,  ]</label>
					<visible>Container.Content(movies) + !StringCompare(Window(Home).Property(SkinHelper.RottenTomatoesBoxOffice),N/A)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label>$INFO[ListItem.Title]$INFO[ListItem.Season,   ,]$INFO[ListItem.Episode,x]$VAR[LabelDuration,   ,]</label>
					<visible>!Container.Content(movies) + !Container.Content(TVShows)</visible>
				</control>
				<control type="label">
					<aligny>center</aligny>
					<align>left</align>
					<font>Medium</font>
					<textcolor>white</textcolor>
					<height>38</height>
					<width>auto</width>
					<label>$INFO[ListItem.Studio,,   ]$INFO[ListItem.Season]$INFO[ListItem.Episode,x]$VAR[LabelDuration,   ,]</label>
					<visible>Container.Content(TVShows)</visible>
				</control>
			</control>
			<control type="textbox">
				<description>textarea</description>
				<left>270</left>
					<width>1200</width>
				<top>425</top>
				<height>276</height>
				<align>left</align>
				<font>Medium</font>
				<textcolor>white</textcolor>
				<label>$VAR[PlotCritic]</label>
			</control>
			<control type="fixedlist" id="518">
				<visible>[Container.Content(movies) | Container.Content(sets)]| Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)</visible>
				<bottom>0</bottom>
				<right>-20</right>
				<left>-40</left>
				<onup condition="!Skin.HasSetting(global.kioskmode)">9000</onup>
				<ondown>60</ondown>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<height>337</height>
				<scrolltime tween="cubic" easing="out">500</scrolltime>
				<orientation>horizontal</orientation>
				<focusposition>1</focusposition>
				<viewtype label="31758">list</viewtype>
				<scrolltime tween="quadratic">400</scrolltime>
				<itemlayout height="337" width="222" condition="!Container.Content(episodes)">
					<control type="group">
						<animation effect="zoom" end="90" start="100" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
						<animation effect="fade" end="75" start="100" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
					<control type="image">
						<aspectratio scalediffuse="false">scale</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true" fallback="DefaultMovies.png">$VAR[PosterImage]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
								<selectedcolor>$VAR[UnwatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched) + !ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
								<selectedcolor>$VAR[PlayingColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
								<selectedcolor>$VAR[WatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
								<selectedcolor>$VAR[ResumeColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
								<selectedcolor>$VAR[NewColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
					</control>
				</itemlayout>
				<itemlayout height="337" width="600" condition="Container.Content(episodes)">
					<control type="group">
						<animation effect="zoom" end="90" start="100" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
						<animation effect="fade" end="75" start="100" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
					<control type="image">
						<aspectratio scalediffuse="false">scale</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true" fallback="DefaultMovies.png">$VAR[FanartImage]</texture>
					</control>
					<control type="label">
						<font>SmallBold</font>
						<textcolor>white2</textcolor>
						<height>30</height>
						<bottom>0</bottom>
						<left>0</left>
						<right>0</right>
						<align>center</align>
						<label>$INFO[ListItem.Label]</label>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<selectedcolor>$VAR[UnwatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched) + !ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<selectedcolor>$VAR[PlayingColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<selectedcolor>$VAR[WatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<selectedcolor>$VAR[ResumeColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<selectedcolor>$VAR[NewColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
					</control>
				</itemlayout>
				<focusedlayout height="337" width="222" condition="!Container.Content(episodes)">
					<control type="button">
						<texturefocus>-</texturefocus>
						<texturenofocus>-</texturenofocus>
						<onfocus>ClearProperty(Pixelated.ImageUpdating,home)</onfocus>
						<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
						<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						<onfocus condition="!Container.Scrolling">RunScript(script.toolbox,info=pixelate,id='"$VAR[RealFanartImage]"',pixels=$VAR[VideoInfoBlurLevel],prefix=Pixelated)</onfocus>
					</control>
					<control type="group">
						<animation effect="zoom" end="110" start="100" time="200" center="auto">Focus</animation>
						<animation effect="slide" end="0,-20" start="0" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
					<control type="image">
						<aspectratio scalediffuse="false">scale</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true" fallback="DefaultMovies.png">$VAR[PosterImage]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
								<selectedcolor>$VAR[UnwatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched) + !ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
								<selectedcolor>$VAR[PlayingColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
								<selectedcolor>$VAR[WatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
								<selectedcolor>$VAR[ResumeColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
								<selectedcolor>$VAR[NewColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
					</control>
				</focusedlayout>
				<focusedlayout height="337" width="600" condition="Container.Content(episodes)">
					<control type="button">
						<texturefocus>-</texturefocus>
						<texturenofocus>-</texturenofocus>
						<onfocus>ClearProperty(Pixelated.ImageUpdating,home)</onfocus>
						<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
						<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						<onfocus condition="!Container.Scrolling">RunScript(script.toolbox,info=pixelate,id='"$VAR[RealFanartImage]"',pixels=$VAR[VideoInfoBlurLevel],prefix=Pixelated)</onfocus>
					</control>
					<control type="group">
						<animation effect="zoom" end="110" start="100" time="200" center="auto">Focus</animation>
						<animation effect="slide" end="0,-20" start="0" time="200" center="auto" condition="Control.HasFocus(518)">Conditional</animation>
					<control type="image">
						<aspectratio scalediffuse="false">scale</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true" fallback="DefaultMovies.png">$VAR[FanartImage]</texture>
					</control>
					<control type="label">
						<font>SmallBold</font>
						<textcolor>$VAR[ColourSelected]</textcolor>
						<height>30</height>
						<bottom>0</bottom>
						<left>0</left>
						<right>0</right>
						<align>center</align>
						<label>$INFO[ListItem.Label]</label>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<selectedcolor>$VAR[UnwatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched) + !ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<selectedcolor>$VAR[PlayingColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<selectedcolor>$VAR[WatchedColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<selectedcolor>$VAR[ResumeColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>90</centerright>
						<centertop>35</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<selectedcolor>$VAR[NewColourHighlight]</selectedcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
					</control>
				</focusedlayout>
			</control>

			<control id="123231" type="wraplist">
				<left>-100</left>
				<bottom>-100</bottom>
				<width>1</width>
				<height>1</height>
				<itemlayout height="1" width="1">
				</itemlayout>
				<focusedlayout height="1" width="1">
				</focusedlayout>
				<content target="video">$VAR[DefWidgetCast]</content>
			</control>
				<include>Furniture_ScrollbarNF</include>
		</control>
	</include>
</includes>
