<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
	<include name="View_55_Wall">
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(55)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<animation effect="slide" end="-20,0" center="auto" time="200" condition="Container.Column(7)">Conditional</animation>
			<animation effect="slide" end="20,0" center="auto" time="200" condition="Container.Column(0)">Conditional</animation>
			<animation effect="slide" end="0,-10" center="auto" time="200" condition="Container.Row(1)">Conditional</animation>
			<animation effect="slide" end="0,10" center="auto" time="200" condition="Container.Row(0)">Conditional</animation>

			<animation effect="slide" end="240,0" center="auto" time="200" condition="Container.Column(0)">Conditional</animation>
			<animation effect="slide" end="-240,0" center="auto" time="200" condition="Container.Column(2)">Conditional</animation>
			<animation effect="slide" end="-480,0" center="auto" time="200" condition="Container.Column(3)">Conditional</animation>
			<animation effect="slide" end="-720,0" center="auto" time="200" condition="Container.Column(4)">Conditional</animation>
			<animation effect="slide" end="-960,0" center="auto" time="200" condition="Container.Column(5)">Conditional</animation>
			<animation effect="slide" end="-1200,0" center="auto" time="200" condition="Container.Column(6)">Conditional</animation>
			<animation effect="slide" end="-1440,0" center="auto" time="200" condition="Container.Column(7)">Conditional</animation>
			
			<control type="panel" id="55">
				<visible>Container.Content(musicvideos) | Container.Content(movies) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(sets)</visible>
				<top>TopPad</top>
				<right>0</right>
				<width>1920</width>
				<height>720</height>
					<onleft condition="Control.IsVisible(60)">60</onleft>
					<onleft condition="!Control.IsVisible(60) + !Skin.HasSetting(global.kioskmode)">9000</onleft>
					<onright condition="Control.IsVisible(60)">60</onright>
					<onright condition="!Control.IsVisible(60) + !Skin.HasSetting(global.kioskmode)">9000</onright>
				<onup>55</onup>
				<ondown>55</ondown>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<viewtype label="536">list</viewtype>
				<scrolltime tween="quadratic">400</scrolltime>
				<itemlayout width="240" height="360">
					<control type="group">
					<top>180</top>
					<bottom>-180</bottom>
					<control type="image">
						<left>0</left>
						<top>0</top>
						<right>0</right>
						<bottom>0</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture background="true">$VAR[PosterImage]</texture>
						<animation effect="fade" start="90" end="90" time="00" reversible="false" condition="true">conditional</animation>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
						<visible>Container.Row(0)</visible>
					</control>
					<control type="group">
					<top>-180</top>
					<bottom>180</bottom>
					<control type="image">
						<left>0</left>
						<top>0</top>
						<right>0</right>
						<bottom>0</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture background="true">$VAR[PosterImage]</texture>
						<animation effect="fade" start="90" end="90" time="00" reversible="false" condition="true">conditional</animation>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
						<visible>Container.Row(1)</visible>
					</control>
				</itemlayout>
				<focusedlayout width="240" height="360">
					<control type="group">
						<animation effect="zoom" start="100" end="145" time="100" reversible="false" center="auto">Focus</animation>
						<top>180</top>
						<bottom>-180</bottom>
						<control type="button">
							<texturefocus>-</texturefocus>
							<texturenofocus>-</texturenofocus>
							<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
							<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						</control>
					<control type="image">
						<left>0</left>
						<top>2</top>
						<right>0</right>
						<bottom>2</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture colordiffuse="$VAR[ColourHighlight]" background="true">common/white.png</texture>
						<animation effect="zoom" end="107" time="0" center="auto">Focus</animation>
					</control>
						<control type="image">
							<left>0</left>
							<top>0</top>
							<right>0</right>
							<bottom>0</bottom>
							<aspectratio scalediffuse="false">stretch</aspectratio>
							<texture background="true">$VAR[PosterImage]</texture>
							<animation type="Focus" reversible="false">
								<effect type="rotate" end="1" start="0" time="200" center="auto" tween="quadratic" easing="out" />
							</animation>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
							<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture>$VAR[PosterPercentWatched]</texture>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[PlayingColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[WatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[ResumeColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[NewColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
						</control>
						<visible>Container.Row(0)</visible>
					</control>
					<control type="group">
						<animation effect="zoom" start="100" end="145" time="100" reversible="false" center="auto">Focus</animation>
						<top>-180</top>
						<bottom>180</bottom>
						<control type="button">
							<texturefocus>-</texturefocus>
							<texturenofocus>-</texturenofocus>
							<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
							<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						</control>
					<control type="image">
						<left>0</left>
						<top>2</top>
						<right>0</right>
						<bottom>2</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture colordiffuse="$VAR[ColourHighlight]" background="true">common/white.png</texture>
						<animation effect="zoom" end="107" time="0" center="auto">Focus</animation>
					</control>
						<control type="image">
							<left>0</left>
							<top>0</top>
							<right>0</right>
							<bottom>0</bottom>
							<aspectratio scalediffuse="false">stretch</aspectratio>
							<texture background="true">$VAR[PosterImage]</texture>
							<animation type="Focus" reversible="false">
								<effect type="rotate" end="1" start="0" time="200" center="auto" tween="quadratic" easing="out" />
							</animation>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
							<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture>$VAR[PosterPercentWatched]</texture>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[PlayingColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[WatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[ResumeColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[NewColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
						</control>
						<visible>Container.Row(1)</visible>
					</control>
				</focusedlayout>
			</control>
			<include>Furniture_ScrollbarM</include>
		</control>
	</include>
</includes>